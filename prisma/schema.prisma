generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String     @id @default(uuid())
  discordId String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  character Character?

  @@index([discordId])
}

model Character {
  id                String        @id @default(uuid())
  name              String
  level             Int           @default(1)
  experience        Int           @default(0)
  health            Int           @default(100)
  maxHealth         Int           @default(100)
  attack            Int           @default(10)
  defense           Int           @default(10)
  speed             Int           @default(10)
  currentIsland     String        @default("starter_island")
  mentor            String?
  luffyProgress     Int           @default(0)
  zoroProgress      Int           @default(0)
  usoppProgress     Int           @default(0)
  sanjiProgress     Int           @default(0)
  dailyHealCount    Int           @default(0)
  lastHealTime      DateTime?
  lastDailyReset    DateTime?
  dailyStreak       Int           @default(0)
  combo             Int           @default(0)
  wins              Int           @default(0)
  losses            Int           @default(0)
  winStreak         Int           @default(0)
  highestStreak     Int           @default(0)
  huntStreak        Int           @default(0)
  highestHuntStreak Int           @default(0)
  lastHuntTime      DateTime?
  questPoints       Int           @default(0)
  explorationPoints Int           @default(0)
  statusEffects     String        @default("{\"effects\":[]}")
  activeBuffs       String        @default("{\"buffs\":[]}")
  coins             Int           @default(0)
  bank              Int           @default(0)
  totalGambled      Int           @default(0)
  totalWon          Int           @default(0)
  lastGambleTime    DateTime?
  equippedWeapon    String?
  equippedArmor     String?
  equippedAccessory String?
  userId            String        @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  battles           Battle[]
  location          Location      @relation(fields: [currentIsland], references: [id])
  user              User          @relation(fields: [userId], references: [id])
  receivedDuels     Duel[]        @relation("challenged")
  sentDuels         Duel[]        @relation("challenger")
  inventory         Inventory[]
  quests            Quest[]
  transactions      Transaction[]

  @@index([level, currentIsland])
  @@index([mentor])
  @@index([lastDailyReset])
  @@index([huntStreak, highestHuntStreak])
}

model Battle {
  id          String    @id @default(uuid())
  characterId String
  enemyType   String
  enemyLevel  Int
  startedAt   DateTime  @default(now())
  endedAt     DateTime?
  status      String    @default("IN_PROGRESS")
  turns       String    @default("[]")
  finalStats  String?   @default("{}")
  rewards     String?   @default("{}")
  character   Character @relation(fields: [characterId], references: [id])

  @@index([characterId, status])
}

model Inventory {
  id            String    @id @default(uuid())
  itemId        String
  quantity      Int
  durability    Int?
  isEquipped    Boolean   @default(false)
  slot          String?
  expiresAt     DateTime?
  effect        String?   @default("{}")
  stats         String?   @default("{}")
  level         Int?
  upgrades      Int?      @default(0)
  maxDurability Int?
  characterId   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  item          Item      @relation(fields: [itemId], references: [id])
  character     Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([characterId, itemId])
  @@index([characterId, isEquipped, slot])
}

model Item {
  id            String      @id
  name          String
  description   String
  type          String
  value         Int         @default(0)
  effect        String      @default("{}")
  maxDurability Int?
  stackLimit    Int         @default(999)
  rarity        String      @default("COMMON")
  baseStats     String?     @default("{}")
  upgradeStats  String?     @default("{}")
  maxLevel      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  inventory     Inventory[]

  @@index([type, rarity])
}

model Quest {
  id          String    @id @default(cuid())
  templateId  String    @default("none")
  name        String
  description String
  type        String
  objectives  String    @default("{}")
  rewards     String    @default("{}")
  progress    String    @default("{\"current\": 0, \"required\": 1}")
  status      String    @default("ACTIVE")
  characterId String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  expiresAt   DateTime?
  character   Character @relation(fields: [characterId], references: [id])

  @@index([characterId, status])
  @@index([templateId])
}

model QuestTemplate {
  id           String   @id
  name         String
  description  String
  type         String
  requirements String   @default("{}")
  objectives   String   @default("{}")
  rewards      String   @default("{}")
  isRepeatable Boolean  @default(false)
  cooldown     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Location {
  id                String      @id
  name              String
  description       String
  level             Int         @default(1)
  weather           String      @default("sunny")
  lastWeatherUpdate DateTime    @default(now())
  activeEvent       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  characters        Character[]

  @@index([level])
  @@index([weather])
}

model Transaction {
  id          String    @id @default(uuid())
  characterId String
  type        String
  amount      Int
  description String
  createdAt   DateTime  @default(now())
  character   Character @relation(fields: [characterId], references: [id])

  @@index([characterId, type, createdAt])
}

model Duel {
  id           String    @id @default(uuid())
  challengerId String
  challengedId String
  status       String    @default("PENDING")
  winner       String?
  bet          Int       @default(0)
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  challenged   Character @relation("challenged", fields: [challengedId], references: [id])
  challenger   Character @relation("challenger", fields: [challengerId], references: [id])

  @@index([challengerId, status])
  @@index([challengedId, status])
}
